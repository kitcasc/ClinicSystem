{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\USER\\\\Desktop\\\\code\\\\ClinicSystem\\\\src\\\\context\\\\ClinicContext.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useReducer, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst STORAGE_KEY = 'clinic_state';\n\n// 排序病人的函數\nconst sortPatients = patients => {\n  return [...patients].sort((a, b) => {\n    // 如果兩個病人都不是過號病人，按照號碼排序\n    if (!a.returnTime && !b.returnTime) {\n      return a.queueNumber - b.queueNumber;\n    }\n\n    // 如果只有一個是過號病人\n    if (a.returnTime && !b.returnTime) {\n      // 過號病人應該排在其原始號碼後面的下一個正常號碼之後\n      const normalPatients = patients.filter(p => !p.returnTime && p.status === 'waiting');\n      const nextNormalNumbers = normalPatients.map(p => p.queueNumber).filter(num => num > a.queueNumber).sort((x, y) => x - y);\n\n      // 如果 b 的號碼小於過號病人的下一個正常號碼，b 應該排在前面\n      if (nextNormalNumbers.length > 0 && b.queueNumber <= nextNormalNumbers[0]) {\n        return 1;\n      }\n      // 如果 b 的號碼大於過號病人的下一個正常號碼，過號病人應該排在前面\n      return -1;\n    }\n    if (!a.returnTime && b.returnTime) {\n      // 過號病人應該排在其原始號碼後面的下一個正常號碼之後\n      const normalPatients = patients.filter(p => !p.returnTime && p.status === 'waiting');\n      const nextNormalNumbers = normalPatients.map(p => p.queueNumber).filter(num => num > b.queueNumber).sort((x, y) => x - y);\n\n      // 如果 a 的號碼小於過號病人的下一個正常號碼，a 應該排在前面\n      if (nextNormalNumbers.length > 0 && a.queueNumber <= nextNormalNumbers[0]) {\n        return -1;\n      }\n      // 如果 a 的號碼大於過號病人的下一個正常號碼，過號病人應該排在前面\n      return 1;\n    }\n\n    // 如果兩個都是過號病人，按照他們的原始號碼排序\n    return a.queueNumber - b.queueNumber;\n  });\n};\nconst getInitialState = () => {\n  const savedState = localStorage.getItem(STORAGE_KEY);\n  if (savedState) {\n    try {\n      const parsed = JSON.parse(savedState);\n      // 將日期字符串轉換回 Date 對象\n      const state = {\n        ...parsed,\n        patients: parsed.patients.map(patient => ({\n          ...patient,\n          checkInTime: new Date(patient.checkInTime),\n          noShowTime: patient.noShowTime ? new Date(patient.noShowTime) : undefined,\n          returnTime: patient.returnTime ? new Date(patient.returnTime) : undefined\n        }))\n      };\n\n      // 排序病人\n      state.patients = sortPatients(state.patients);\n      return state;\n    } catch (e) {\n      console.error('Error parsing saved state:', e);\n    }\n  }\n  return {\n    patients: [],\n    maxQueueNumber: 0\n  };\n};\nconst initialState = getInitialState();\nconst ClinicContext = /*#__PURE__*/createContext(null);\nconst clinicReducer = (state, action) => {\n  let newState;\n  switch (action.type) {\n    case 'ADD_PATIENT':\n      newState = {\n        ...state,\n        patients: [...state.patients, action.payload],\n        maxQueueNumber: Math.max(state.maxQueueNumber, action.payload.queueNumber)\n      };\n      break;\n    case 'UPDATE_PATIENT':\n      newState = {\n        ...state,\n        patients: state.patients.map(p => p.id === action.payload.id ? action.payload : p)\n      };\n      break;\n    case 'SET_MAX_QUEUE_NUMBER':\n      newState = {\n        ...state,\n        maxQueueNumber: action.payload\n      };\n      break;\n    case 'LOAD_STATE':\n      newState = action.payload;\n      break;\n    case 'SORT_PATIENTS':\n      newState = {\n        ...state,\n        patients: sortPatients(state.patients)\n      };\n      break;\n    default:\n      return state;\n  }\n\n  // 排序病人\n  newState.patients = sortPatients(newState.patients);\n\n  // 保存到 localStorage\n  localStorage.setItem(STORAGE_KEY, JSON.stringify(newState));\n  return newState;\n};\nexport const ClinicProvider = ({\n  children\n}) => {\n  _s();\n  const [state, dispatch] = useReducer(clinicReducer, initialState);\n\n  // 監聽 localStorage 變化\n  useEffect(() => {\n    const handleStorageChange = e => {\n      if (e.key === STORAGE_KEY && e.newValue) {\n        try {\n          const newState = JSON.parse(e.newValue);\n          // 將日期字符串轉換回 Date 對象\n          const parsedState = {\n            ...newState,\n            patients: newState.patients.map(patient => ({\n              ...patient,\n              checkInTime: new Date(patient.checkInTime),\n              noShowTime: patient.noShowTime ? new Date(patient.noShowTime) : undefined,\n              returnTime: patient.returnTime ? new Date(patient.returnTime) : undefined\n            }))\n          };\n\n          // 排序病人\n          parsedState.patients = sortPatients(parsedState.patients);\n\n          // 直接加載整個狀態\n          dispatch({\n            type: 'LOAD_STATE',\n            payload: parsedState\n          });\n        } catch (e) {\n          console.error('Error parsing storage event data:', e);\n        }\n      }\n    };\n    window.addEventListener('storage', handleStorageChange);\n    return () => window.removeEventListener('storage', handleStorageChange);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(ClinicContext.Provider, {\n    value: {\n      state,\n      dispatch\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 183,\n    columnNumber: 5\n  }, this);\n};\n_s(ClinicProvider, \"bgCdjuTOmPdSBRwTap80EFd9Y3U=\");\n_c = ClinicProvider;\nexport const useClinic = () => {\n  _s2();\n  const context = useContext(ClinicContext);\n  if (!context) {\n    throw new Error('useClinic must be used within a ClinicProvider');\n  }\n  return context;\n};\n_s2(useClinic, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"ClinicProvider\");","map":{"version":3,"names":["React","createContext","useContext","useReducer","useEffect","jsxDEV","_jsxDEV","STORAGE_KEY","sortPatients","patients","sort","a","b","returnTime","queueNumber","normalPatients","filter","p","status","nextNormalNumbers","map","num","x","y","length","getInitialState","savedState","localStorage","getItem","parsed","JSON","parse","state","patient","checkInTime","Date","noShowTime","undefined","e","console","error","maxQueueNumber","initialState","ClinicContext","clinicReducer","action","newState","type","payload","Math","max","id","setItem","stringify","ClinicProvider","children","_s","dispatch","handleStorageChange","key","newValue","parsedState","window","addEventListener","removeEventListener","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useClinic","_s2","context","Error","$RefreshReg$"],"sources":["C:/Users/USER/Desktop/code/ClinicSystem/src/context/ClinicContext.tsx"],"sourcesContent":["import React, { createContext, useContext, useReducer, ReactNode, useEffect } from 'react';\r\nimport { Patient } from '../types';\r\n\r\ninterface ClinicState {\r\n  patients: Patient[];\r\n  maxQueueNumber: number;\r\n}\r\n\r\ntype ClinicAction =\r\n  | { type: 'ADD_PATIENT'; payload: Patient }\r\n  | { type: 'UPDATE_PATIENT'; payload: Patient }\r\n  | { type: 'SET_MAX_QUEUE_NUMBER'; payload: number }\r\n  | { type: 'LOAD_STATE'; payload: ClinicState }\r\n  | { type: 'SORT_PATIENTS' };\r\n\r\nconst STORAGE_KEY = 'clinic_state';\r\n\r\n// 排序病人的函數\r\nconst sortPatients = (patients: Patient[]): Patient[] => {\r\n  return [...patients].sort((a, b) => {\r\n    // 如果兩個病人都不是過號病人，按照號碼排序\r\n    if (!a.returnTime && !b.returnTime) {\r\n      return a.queueNumber - b.queueNumber;\r\n    }\r\n\r\n    // 如果只有一個是過號病人\r\n    if (a.returnTime && !b.returnTime) {\r\n      // 過號病人應該排在其原始號碼後面的下一個正常號碼之後\r\n      const normalPatients = patients.filter(p => !p.returnTime && p.status === 'waiting');\r\n      const nextNormalNumbers = normalPatients\r\n        .map(p => p.queueNumber)\r\n        .filter(num => num > a.queueNumber)\r\n        .sort((x, y) => x - y);\r\n      \r\n      // 如果 b 的號碼小於過號病人的下一個正常號碼，b 應該排在前面\r\n      if (nextNormalNumbers.length > 0 && b.queueNumber <= nextNormalNumbers[0]) {\r\n        return 1;\r\n      }\r\n      // 如果 b 的號碼大於過號病人的下一個正常號碼，過號病人應該排在前面\r\n      return -1;\r\n    }\r\n\r\n    if (!a.returnTime && b.returnTime) {\r\n      // 過號病人應該排在其原始號碼後面的下一個正常號碼之後\r\n      const normalPatients = patients.filter(p => !p.returnTime && p.status === 'waiting');\r\n      const nextNormalNumbers = normalPatients\r\n        .map(p => p.queueNumber)\r\n        .filter(num => num > b.queueNumber)\r\n        .sort((x, y) => x - y);\r\n      \r\n      // 如果 a 的號碼小於過號病人的下一個正常號碼，a 應該排在前面\r\n      if (nextNormalNumbers.length > 0 && a.queueNumber <= nextNormalNumbers[0]) {\r\n        return -1;\r\n      }\r\n      // 如果 a 的號碼大於過號病人的下一個正常號碼，過號病人應該排在前面\r\n      return 1;\r\n    }\r\n\r\n    // 如果兩個都是過號病人，按照他們的原始號碼排序\r\n    return a.queueNumber - b.queueNumber;\r\n  });\r\n};\r\n\r\nconst getInitialState = (): ClinicState => {\r\n  const savedState = localStorage.getItem(STORAGE_KEY);\r\n  if (savedState) {\r\n    try {\r\n      const parsed = JSON.parse(savedState);\r\n      // 將日期字符串轉換回 Date 對象\r\n      const state = {\r\n        ...parsed,\r\n        patients: parsed.patients.map((patient: any) => ({\r\n          ...patient,\r\n          checkInTime: new Date(patient.checkInTime),\r\n          noShowTime: patient.noShowTime ? new Date(patient.noShowTime) : undefined,\r\n          returnTime: patient.returnTime ? new Date(patient.returnTime) : undefined,\r\n        })),\r\n      };\r\n      \r\n      // 排序病人\r\n      state.patients = sortPatients(state.patients);\r\n      \r\n      return state;\r\n    } catch (e) {\r\n      console.error('Error parsing saved state:', e);\r\n    }\r\n  }\r\n  return {\r\n    patients: [],\r\n    maxQueueNumber: 0,\r\n  };\r\n};\r\n\r\nconst initialState = getInitialState();\r\n\r\nconst ClinicContext = createContext<{\r\n  state: ClinicState;\r\n  dispatch: React.Dispatch<ClinicAction>;\r\n} | null>(null);\r\n\r\nconst clinicReducer = (state: ClinicState, action: ClinicAction): ClinicState => {\r\n  let newState: ClinicState;\r\n  \r\n  switch (action.type) {\r\n    case 'ADD_PATIENT':\r\n      newState = {\r\n        ...state,\r\n        patients: [...state.patients, action.payload],\r\n        maxQueueNumber: Math.max(state.maxQueueNumber, action.payload.queueNumber),\r\n      };\r\n      break;\r\n    case 'UPDATE_PATIENT':\r\n      newState = {\r\n        ...state,\r\n        patients: state.patients.map((p) =>\r\n          p.id === action.payload.id ? action.payload : p\r\n        ),\r\n      };\r\n      break;\r\n    case 'SET_MAX_QUEUE_NUMBER':\r\n      newState = {\r\n        ...state,\r\n        maxQueueNumber: action.payload,\r\n      };\r\n      break;\r\n    case 'LOAD_STATE':\r\n      newState = action.payload;\r\n      break;\r\n    case 'SORT_PATIENTS':\r\n      newState = {\r\n        ...state,\r\n        patients: sortPatients(state.patients),\r\n      };\r\n      break;\r\n    default:\r\n      return state;\r\n  }\r\n\r\n  // 排序病人\r\n  newState.patients = sortPatients(newState.patients);\r\n\r\n  // 保存到 localStorage\r\n  localStorage.setItem(STORAGE_KEY, JSON.stringify(newState));\r\n  return newState;\r\n};\r\n\r\nexport const ClinicProvider: React.FC<{ children: ReactNode }> = ({ children }) => {\r\n  const [state, dispatch] = useReducer(clinicReducer, initialState);\r\n\r\n  // 監聽 localStorage 變化\r\n  useEffect(() => {\r\n    const handleStorageChange = (e: StorageEvent) => {\r\n      if (e.key === STORAGE_KEY && e.newValue) {\r\n        try {\r\n          const newState = JSON.parse(e.newValue);\r\n          // 將日期字符串轉換回 Date 對象\r\n          const parsedState = {\r\n            ...newState,\r\n            patients: newState.patients.map((patient: any) => ({\r\n              ...patient,\r\n              checkInTime: new Date(patient.checkInTime),\r\n              noShowTime: patient.noShowTime ? new Date(patient.noShowTime) : undefined,\r\n              returnTime: patient.returnTime ? new Date(patient.returnTime) : undefined,\r\n            })),\r\n          };\r\n          \r\n          // 排序病人\r\n          parsedState.patients = sortPatients(parsedState.patients);\r\n          \r\n          // 直接加載整個狀態\r\n          dispatch({ type: 'LOAD_STATE', payload: parsedState });\r\n        } catch (e) {\r\n          console.error('Error parsing storage event data:', e);\r\n        }\r\n      }\r\n    };\r\n\r\n    window.addEventListener('storage', handleStorageChange);\r\n    return () => window.removeEventListener('storage', handleStorageChange);\r\n  }, []);\r\n\r\n  return (\r\n    <ClinicContext.Provider value={{ state, dispatch }}>\r\n      {children}\r\n    </ClinicContext.Provider>\r\n  );\r\n};\r\n\r\nexport const useClinic = () => {\r\n  const context = useContext(ClinicContext);\r\n  if (!context) {\r\n    throw new Error('useClinic must be used within a ClinicProvider');\r\n  }\r\n  return context;\r\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}