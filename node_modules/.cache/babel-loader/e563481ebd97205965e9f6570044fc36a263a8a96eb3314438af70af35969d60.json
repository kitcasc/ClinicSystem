{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\USER\\\\Desktop\\\\code\\\\ClinicSystem\\\\src\\\\context\\\\ClinicContext.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useReducer, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst STORAGE_KEY = 'clinic_state';\nconst getInitialState = () => {\n  const savedState = localStorage.getItem(STORAGE_KEY);\n  if (savedState) {\n    try {\n      const parsed = JSON.parse(savedState);\n      // 將日期字符串轉換回 Date 對象\n      return {\n        ...parsed,\n        patients: parsed.patients.map(patient => ({\n          ...patient,\n          checkInTime: new Date(patient.checkInTime),\n          noShowTime: patient.noShowTime ? new Date(patient.noShowTime) : undefined,\n          returnTime: patient.returnTime ? new Date(patient.returnTime) : undefined\n        }))\n      };\n    } catch (e) {\n      console.error('Error parsing saved state:', e);\n    }\n  }\n  return {\n    patients: [],\n    maxQueueNumber: 0\n  };\n};\nconst initialState = getInitialState();\nconst ClinicContext = /*#__PURE__*/createContext(null);\nconst clinicReducer = (state, action) => {\n  let newState;\n  switch (action.type) {\n    case 'ADD_PATIENT':\n      newState = {\n        ...state,\n        patients: [...state.patients, action.payload],\n        maxQueueNumber: Math.max(state.maxQueueNumber, action.payload.queueNumber)\n      };\n      break;\n    case 'UPDATE_PATIENT':\n      newState = {\n        ...state,\n        patients: state.patients.map(p => p.id === action.payload.id ? action.payload : p)\n      };\n      break;\n    case 'SET_MAX_QUEUE_NUMBER':\n      newState = {\n        ...state,\n        maxQueueNumber: action.payload\n      };\n      break;\n    case 'LOAD_STATE':\n      newState = action.payload;\n      break;\n    default:\n      return state;\n  }\n\n  // 保存到 localStorage\n  localStorage.setItem(STORAGE_KEY, JSON.stringify(newState));\n  return newState;\n};\nexport const ClinicProvider = ({\n  children\n}) => {\n  _s();\n  const [state, dispatch] = useReducer(clinicReducer, initialState);\n\n  // 監聽 localStorage 變化\n  useEffect(() => {\n    const handleStorageChange = e => {\n      if (e.key === STORAGE_KEY && e.newValue) {\n        try {\n          const newState = JSON.parse(e.newValue);\n          // 將日期字符串轉換回 Date 對象\n          const parsedState = {\n            ...newState,\n            patients: newState.patients.map(patient => ({\n              ...patient,\n              checkInTime: new Date(patient.checkInTime),\n              noShowTime: patient.noShowTime ? new Date(patient.noShowTime) : undefined,\n              returnTime: patient.returnTime ? new Date(patient.returnTime) : undefined\n            }))\n          };\n          // 直接加載整個狀態\n          dispatch({\n            type: 'LOAD_STATE',\n            payload: parsedState\n          });\n        } catch (e) {\n          console.error('Error parsing storage event data:', e);\n        }\n      }\n    };\n    window.addEventListener('storage', handleStorageChange);\n    return () => window.removeEventListener('storage', handleStorageChange);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(ClinicContext.Provider, {\n    value: {\n      state,\n      dispatch\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 118,\n    columnNumber: 5\n  }, this);\n};\n_s(ClinicProvider, \"bgCdjuTOmPdSBRwTap80EFd9Y3U=\");\n_c = ClinicProvider;\nexport const useClinic = () => {\n  _s2();\n  const context = useContext(ClinicContext);\n  if (!context) {\n    throw new Error('useClinic must be used within a ClinicProvider');\n  }\n  return context;\n};\n_s2(useClinic, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"ClinicProvider\");","map":{"version":3,"names":["React","createContext","useContext","useReducer","useEffect","jsxDEV","_jsxDEV","STORAGE_KEY","getInitialState","savedState","localStorage","getItem","parsed","JSON","parse","patients","map","patient","checkInTime","Date","noShowTime","undefined","returnTime","e","console","error","maxQueueNumber","initialState","ClinicContext","clinicReducer","state","action","newState","type","payload","Math","max","queueNumber","p","id","setItem","stringify","ClinicProvider","children","_s","dispatch","handleStorageChange","key","newValue","parsedState","window","addEventListener","removeEventListener","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useClinic","_s2","context","Error","$RefreshReg$"],"sources":["C:/Users/USER/Desktop/code/ClinicSystem/src/context/ClinicContext.tsx"],"sourcesContent":["import React, { createContext, useContext, useReducer, ReactNode, useEffect } from 'react';\r\nimport { Patient } from '../types';\r\n\r\ninterface ClinicState {\r\n  patients: Patient[];\r\n  maxQueueNumber: number;\r\n}\r\n\r\ntype ClinicAction =\r\n  | { type: 'ADD_PATIENT'; payload: Patient }\r\n  | { type: 'UPDATE_PATIENT'; payload: Patient }\r\n  | { type: 'SET_MAX_QUEUE_NUMBER'; payload: number }\r\n  | { type: 'LOAD_STATE'; payload: ClinicState };\r\n\r\nconst STORAGE_KEY = 'clinic_state';\r\n\r\nconst getInitialState = (): ClinicState => {\r\n  const savedState = localStorage.getItem(STORAGE_KEY);\r\n  if (savedState) {\r\n    try {\r\n      const parsed = JSON.parse(savedState);\r\n      // 將日期字符串轉換回 Date 對象\r\n      return {\r\n        ...parsed,\r\n        patients: parsed.patients.map((patient: any) => ({\r\n          ...patient,\r\n          checkInTime: new Date(patient.checkInTime),\r\n          noShowTime: patient.noShowTime ? new Date(patient.noShowTime) : undefined,\r\n          returnTime: patient.returnTime ? new Date(patient.returnTime) : undefined,\r\n        })),\r\n      };\r\n    } catch (e) {\r\n      console.error('Error parsing saved state:', e);\r\n    }\r\n  }\r\n  return {\r\n    patients: [],\r\n    maxQueueNumber: 0,\r\n  };\r\n};\r\n\r\nconst initialState = getInitialState();\r\n\r\nconst ClinicContext = createContext<{\r\n  state: ClinicState;\r\n  dispatch: React.Dispatch<ClinicAction>;\r\n} | null>(null);\r\n\r\nconst clinicReducer = (state: ClinicState, action: ClinicAction): ClinicState => {\r\n  let newState: ClinicState;\r\n  \r\n  switch (action.type) {\r\n    case 'ADD_PATIENT':\r\n      newState = {\r\n        ...state,\r\n        patients: [...state.patients, action.payload],\r\n        maxQueueNumber: Math.max(state.maxQueueNumber, action.payload.queueNumber),\r\n      };\r\n      break;\r\n    case 'UPDATE_PATIENT':\r\n      newState = {\r\n        ...state,\r\n        patients: state.patients.map((p) =>\r\n          p.id === action.payload.id ? action.payload : p\r\n        ),\r\n      };\r\n      break;\r\n    case 'SET_MAX_QUEUE_NUMBER':\r\n      newState = {\r\n        ...state,\r\n        maxQueueNumber: action.payload,\r\n      };\r\n      break;\r\n    case 'LOAD_STATE':\r\n      newState = action.payload;\r\n      break;\r\n    default:\r\n      return state;\r\n  }\r\n\r\n  // 保存到 localStorage\r\n  localStorage.setItem(STORAGE_KEY, JSON.stringify(newState));\r\n  return newState;\r\n};\r\n\r\nexport const ClinicProvider: React.FC<{ children: ReactNode }> = ({ children }) => {\r\n  const [state, dispatch] = useReducer(clinicReducer, initialState);\r\n\r\n  // 監聽 localStorage 變化\r\n  useEffect(() => {\r\n    const handleStorageChange = (e: StorageEvent) => {\r\n      if (e.key === STORAGE_KEY && e.newValue) {\r\n        try {\r\n          const newState = JSON.parse(e.newValue);\r\n          // 將日期字符串轉換回 Date 對象\r\n          const parsedState = {\r\n            ...newState,\r\n            patients: newState.patients.map((patient: any) => ({\r\n              ...patient,\r\n              checkInTime: new Date(patient.checkInTime),\r\n              noShowTime: patient.noShowTime ? new Date(patient.noShowTime) : undefined,\r\n              returnTime: patient.returnTime ? new Date(patient.returnTime) : undefined,\r\n            })),\r\n          };\r\n          // 直接加載整個狀態\r\n          dispatch({ type: 'LOAD_STATE', payload: parsedState });\r\n        } catch (e) {\r\n          console.error('Error parsing storage event data:', e);\r\n        }\r\n      }\r\n    };\r\n\r\n    window.addEventListener('storage', handleStorageChange);\r\n    return () => window.removeEventListener('storage', handleStorageChange);\r\n  }, []);\r\n\r\n  return (\r\n    <ClinicContext.Provider value={{ state, dispatch }}>\r\n      {children}\r\n    </ClinicContext.Provider>\r\n  );\r\n};\r\n\r\nexport const useClinic = () => {\r\n  const context = useContext(ClinicContext);\r\n  if (!context) {\r\n    throw new Error('useClinic must be used within a ClinicProvider');\r\n  }\r\n  return context;\r\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}