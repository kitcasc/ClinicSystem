{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\USER\\\\Desktop\\\\code\\\\ClinicSystem\\\\src\\\\context\\\\ClinicContext.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useReducer } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initialState = {\n  patients: [],\n  maxQueueNumber: 0\n};\nconst ClinicContext = /*#__PURE__*/createContext(null);\nconst clinicReducer = (state, action) => {\n  switch (action.type) {\n    case 'ADD_PATIENT':\n      return {\n        ...state,\n        patients: [...state.patients, action.payload],\n        maxQueueNumber: Math.max(state.maxQueueNumber, action.payload.queueNumber)\n      };\n    case 'UPDATE_PATIENT':\n      return {\n        ...state,\n        patients: state.patients.map(p => p.id === action.payload.id ? action.payload : p)\n      };\n    case 'SET_MAX_QUEUE_NUMBER':\n      return {\n        ...state,\n        maxQueueNumber: action.payload\n      };\n    default:\n      return state;\n  }\n};\nexport const ClinicProvider = ({\n  children\n}) => {\n  _s();\n  const [state, dispatch] = useReducer(clinicReducer, initialState);\n  return /*#__PURE__*/_jsxDEV(ClinicContext.Provider, {\n    value: {\n      state,\n      dispatch\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 5\n  }, this);\n};\n_s(ClinicProvider, \"6JWkGZ32UPfojeNx+xqn8ZU8A0Q=\");\n_c = ClinicProvider;\nexport const useClinic = () => {\n  _s2();\n  const context = useContext(ClinicContext);\n  if (!context) {\n    throw new Error('useClinic must be used within a ClinicProvider');\n  }\n  return context;\n};\n_s2(useClinic, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"ClinicProvider\");","map":{"version":3,"names":["React","createContext","useContext","useReducer","jsxDEV","_jsxDEV","initialState","patients","maxQueueNumber","ClinicContext","clinicReducer","state","action","type","payload","Math","max","queueNumber","map","p","id","ClinicProvider","children","_s","dispatch","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useClinic","_s2","context","Error","$RefreshReg$"],"sources":["C:/Users/USER/Desktop/code/ClinicSystem/src/context/ClinicContext.tsx"],"sourcesContent":["import React, { createContext, useContext, useReducer, ReactNode } from 'react';\r\nimport { Patient } from '../types';\r\n\r\ninterface ClinicState {\r\n  patients: Patient[];\r\n  maxQueueNumber: number;\r\n}\r\n\r\ntype ClinicAction =\r\n  | { type: 'ADD_PATIENT'; payload: Patient }\r\n  | { type: 'UPDATE_PATIENT'; payload: Patient }\r\n  | { type: 'SET_MAX_QUEUE_NUMBER'; payload: number };\r\n\r\nconst initialState: ClinicState = {\r\n  patients: [],\r\n  maxQueueNumber: 0,\r\n};\r\n\r\nconst ClinicContext = createContext<{\r\n  state: ClinicState;\r\n  dispatch: React.Dispatch<ClinicAction>;\r\n} | null>(null);\r\n\r\nconst clinicReducer = (state: ClinicState, action: ClinicAction): ClinicState => {\r\n  switch (action.type) {\r\n    case 'ADD_PATIENT':\r\n      return {\r\n        ...state,\r\n        patients: [...state.patients, action.payload],\r\n        maxQueueNumber: Math.max(state.maxQueueNumber, action.payload.queueNumber),\r\n      };\r\n    case 'UPDATE_PATIENT':\r\n      return {\r\n        ...state,\r\n        patients: state.patients.map((p) =>\r\n          p.id === action.payload.id ? action.payload : p\r\n        ),\r\n      };\r\n    case 'SET_MAX_QUEUE_NUMBER':\r\n      return {\r\n        ...state,\r\n        maxQueueNumber: action.payload,\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport const ClinicProvider: React.FC<{ children: ReactNode }> = ({ children }) => {\r\n  const [state, dispatch] = useReducer(clinicReducer, initialState);\r\n\r\n  return (\r\n    <ClinicContext.Provider value={{ state, dispatch }}>\r\n      {children}\r\n    </ClinicContext.Provider>\r\n  );\r\n};\r\n\r\nexport const useClinic = () => {\r\n  const context = useContext(ClinicContext);\r\n  if (!context) {\r\n    throw new Error('useClinic must be used within a ClinicProvider');\r\n  }\r\n  return context;\r\n}; "],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,UAAU,EAAEC,UAAU,QAAmB,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAahF,MAAMC,YAAyB,GAAG;EAChCC,QAAQ,EAAE,EAAE;EACZC,cAAc,EAAE;AAClB,CAAC;AAED,MAAMC,aAAa,gBAAGR,aAAa,CAGzB,IAAI,CAAC;AAEf,MAAMS,aAAa,GAAGA,CAACC,KAAkB,EAAEC,MAAoB,KAAkB;EAC/E,QAAQA,MAAM,CAACC,IAAI;IACjB,KAAK,aAAa;MAChB,OAAO;QACL,GAAGF,KAAK;QACRJ,QAAQ,EAAE,CAAC,GAAGI,KAAK,CAACJ,QAAQ,EAAEK,MAAM,CAACE,OAAO,CAAC;QAC7CN,cAAc,EAAEO,IAAI,CAACC,GAAG,CAACL,KAAK,CAACH,cAAc,EAAEI,MAAM,CAACE,OAAO,CAACG,WAAW;MAC3E,CAAC;IACH,KAAK,gBAAgB;MACnB,OAAO;QACL,GAAGN,KAAK;QACRJ,QAAQ,EAAEI,KAAK,CAACJ,QAAQ,CAACW,GAAG,CAAEC,CAAC,IAC7BA,CAAC,CAACC,EAAE,KAAKR,MAAM,CAACE,OAAO,CAACM,EAAE,GAAGR,MAAM,CAACE,OAAO,GAAGK,CAChD;MACF,CAAC;IACH,KAAK,sBAAsB;MACzB,OAAO;QACL,GAAGR,KAAK;QACRH,cAAc,EAAEI,MAAM,CAACE;MACzB,CAAC;IACH;MACE,OAAOH,KAAK;EAChB;AACF,CAAC;AAED,OAAO,MAAMU,cAAiD,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EACjF,MAAM,CAACZ,KAAK,EAAEa,QAAQ,CAAC,GAAGrB,UAAU,CAACO,aAAa,EAAEJ,YAAY,CAAC;EAEjE,oBACED,OAAA,CAACI,aAAa,CAACgB,QAAQ;IAACC,KAAK,EAAE;MAAEf,KAAK;MAAEa;IAAS,CAAE;IAAAF,QAAA,EAChDA;EAAQ;IAAAK,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACa,CAAC;AAE7B,CAAC;AAACP,EAAA,CARWF,cAAiD;AAAAU,EAAA,GAAjDV,cAAiD;AAU9D,OAAO,MAAMW,SAAS,GAAGA,CAAA,KAAM;EAAAC,GAAA;EAC7B,MAAMC,OAAO,GAAGhC,UAAU,CAACO,aAAa,CAAC;EACzC,IAAI,CAACyB,OAAO,EAAE;IACZ,MAAM,IAAIC,KAAK,CAAC,gDAAgD,CAAC;EACnE;EACA,OAAOD,OAAO;AAChB,CAAC;AAACD,GAAA,CANWD,SAAS;AAAA,IAAAD,EAAA;AAAAK,YAAA,CAAAL,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}