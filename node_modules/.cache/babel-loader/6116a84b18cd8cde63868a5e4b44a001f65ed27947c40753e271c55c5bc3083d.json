{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\USER\\\\Desktop\\\\code\\\\ClinicSystem\\\\src\\\\context\\\\ClinicContext.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useReducer, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst STORAGE_KEY = 'clinic_state';\n\n// 排序病人的函數\nconst sortPatients = patients => {\n  // 首先找出正在看診中的病人\n  const inProgressPatient = patients.find(p => p.status === 'inProgress');\n\n  // 將病人分為幾個組別\n  const inProgress = inProgressPatient ? [inProgressPatient] : [];\n  const waitingNormal = patients.filter(p => p.status === 'waiting' && !p.returnTime);\n  const waitingReturned = patients.filter(p => p.status === 'waiting' && p.returnTime);\n  const noShowNotReturned = patients.filter(p => p.status === 'noShow' && !p.returnTime);\n  const noShowReturned = patients.filter(p => p.status === 'noShow' && p.returnTime);\n  const completed = patients.filter(p => p.status === 'completed');\n\n  // 對正常候診病人按號碼排序\n  waitingNormal.sort((a, b) => a.queueNumber - b.queueNumber);\n\n  // 對已回報的過號病人按回報時間排序\n  waitingReturned.sort((a, b) => a.returnTime.getTime() - b.returnTime.getTime());\n  noShowReturned.sort((a, b) => a.returnTime.getTime() - b.returnTime.getTime());\n\n  // 合併已回報的過號病人到候診名單中，根據規則插入\n  // 規則：過號病人回報後，需等待目前看診中的病人看完，再等下一個正常病人看完後才輪到他看診\n  const finalWaiting = [...waitingNormal];\n  if (inProgressPatient && waitingNormal.length > 0) {\n    // 找到目前看診中的病人後的下一個正常病人\n    const nextNormalIndex = waitingNormal.findIndex(p => p.queueNumber > inProgressPatient.queueNumber);\n    let insertIndex = nextNormalIndex >= 0 ? nextNormalIndex + 1 : waitingNormal.length;\n\n    // 插入已回報的過號病人 (從 waitingReturned 和 noShowReturned)\n    const allReturned = [...waitingReturned, ...noShowReturned];\n    for (const returnedPatient of allReturned) {\n      // 確保插入位置不超出陣列長度\n      if (insertIndex >= finalWaiting.length) {\n        finalWaiting.push(returnedPatient);\n      } else {\n        finalWaiting.splice(insertIndex, 0, returnedPatient);\n      }\n      // 下一個過號病人插入到下一個位置\n      insertIndex++;\n    }\n  } else {\n    // 如果沒有正在看診的病人或沒有正常候診病人，直接將過號病人加到最後\n    finalWaiting.push(...waitingReturned, ...noShowReturned);\n  }\n\n  // 組合所有病人\n  return [...inProgress, ...finalWaiting, ...noShowNotReturned, ...completed];\n};\nconst getInitialState = () => {\n  const savedState = localStorage.getItem(STORAGE_KEY);\n  if (savedState) {\n    try {\n      const parsed = JSON.parse(savedState);\n      // 將日期字符串轉換回 Date 對象\n      const state = {\n        ...parsed,\n        patients: parsed.patients.map(patient => ({\n          ...patient,\n          checkInTime: new Date(patient.checkInTime),\n          noShowTime: patient.noShowTime ? new Date(patient.noShowTime) : undefined,\n          returnTime: patient.returnTime ? new Date(patient.returnTime) : undefined\n        }))\n      };\n\n      // 排序病人\n      state.patients = sortPatients(state.patients);\n      return state;\n    } catch (e) {\n      console.error('Error parsing saved state:', e);\n    }\n  }\n  return {\n    patients: [],\n    maxQueueNumber: 0\n  };\n};\nconst initialState = getInitialState();\nconst ClinicContext = /*#__PURE__*/createContext(null);\nconst clinicReducer = (state, action) => {\n  let newState;\n  switch (action.type) {\n    case 'ADD_PATIENT':\n      newState = {\n        ...state,\n        patients: [...state.patients, action.payload],\n        maxQueueNumber: Math.max(state.maxQueueNumber, action.payload.queueNumber)\n      };\n      break;\n    case 'UPDATE_PATIENT':\n      newState = {\n        ...state,\n        patients: state.patients.map(p => p.id === action.payload.id ? action.payload : p)\n      };\n      break;\n    case 'SET_MAX_QUEUE_NUMBER':\n      newState = {\n        ...state,\n        maxQueueNumber: action.payload\n      };\n      break;\n    case 'LOAD_STATE':\n      newState = action.payload;\n      break;\n    case 'SORT_PATIENTS':\n      newState = {\n        ...state,\n        patients: sortPatients(state.patients)\n      };\n      break;\n    default:\n      return state;\n  }\n\n  // 排序病人\n  newState.patients = sortPatients(newState.patients);\n\n  // 保存到 localStorage\n  localStorage.setItem(STORAGE_KEY, JSON.stringify(newState));\n  return newState;\n};\nexport const ClinicProvider = ({\n  children\n}) => {\n  _s();\n  const [state, dispatch] = useReducer(clinicReducer, initialState);\n\n  // 監聽 localStorage 變化\n  useEffect(() => {\n    const handleStorageChange = e => {\n      if (e.key === STORAGE_KEY && e.newValue) {\n        try {\n          const newState = JSON.parse(e.newValue);\n          // 將日期字符串轉換回 Date 對象\n          const parsedState = {\n            ...newState,\n            patients: newState.patients.map(patient => ({\n              ...patient,\n              checkInTime: new Date(patient.checkInTime),\n              noShowTime: patient.noShowTime ? new Date(patient.noShowTime) : undefined,\n              returnTime: patient.returnTime ? new Date(patient.returnTime) : undefined\n            }))\n          };\n\n          // 排序病人\n          parsedState.patients = sortPatients(parsedState.patients);\n\n          // 直接加載整個狀態\n          dispatch({\n            type: 'LOAD_STATE',\n            payload: parsedState\n          });\n        } catch (e) {\n          console.error('Error parsing storage event data:', e);\n        }\n      }\n    };\n    window.addEventListener('storage', handleStorageChange);\n    return () => window.removeEventListener('storage', handleStorageChange);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(ClinicContext.Provider, {\n    value: {\n      state,\n      dispatch\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 191,\n    columnNumber: 5\n  }, this);\n};\n_s(ClinicProvider, \"bgCdjuTOmPdSBRwTap80EFd9Y3U=\");\n_c = ClinicProvider;\nexport const useClinic = () => {\n  _s2();\n  const context = useContext(ClinicContext);\n  if (!context) {\n    throw new Error('useClinic must be used within a ClinicProvider');\n  }\n  return context;\n};\n_s2(useClinic, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"ClinicProvider\");","map":{"version":3,"names":["React","createContext","useContext","useReducer","useEffect","jsxDEV","_jsxDEV","STORAGE_KEY","sortPatients","patients","inProgressPatient","find","p","status","inProgress","waitingNormal","filter","returnTime","waitingReturned","noShowNotReturned","noShowReturned","completed","sort","a","b","queueNumber","getTime","finalWaiting","length","nextNormalIndex","findIndex","insertIndex","allReturned","returnedPatient","push","splice","getInitialState","savedState","localStorage","getItem","parsed","JSON","parse","state","map","patient","checkInTime","Date","noShowTime","undefined","e","console","error","maxQueueNumber","initialState","ClinicContext","clinicReducer","action","newState","type","payload","Math","max","id","setItem","stringify","ClinicProvider","children","_s","dispatch","handleStorageChange","key","newValue","parsedState","window","addEventListener","removeEventListener","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useClinic","_s2","context","Error","$RefreshReg$"],"sources":["C:/Users/USER/Desktop/code/ClinicSystem/src/context/ClinicContext.tsx"],"sourcesContent":["import React, { createContext, useContext, useReducer, ReactNode, useEffect } from 'react';\r\nimport { Patient } from '../types';\r\n\r\ninterface ClinicState {\r\n  patients: Patient[];\r\n  maxQueueNumber: number;\r\n}\r\n\r\ntype ClinicAction =\r\n  | { type: 'ADD_PATIENT'; payload: Patient }\r\n  | { type: 'UPDATE_PATIENT'; payload: Patient }\r\n  | { type: 'SET_MAX_QUEUE_NUMBER'; payload: number }\r\n  | { type: 'LOAD_STATE'; payload: ClinicState }\r\n  | { type: 'SORT_PATIENTS' };\r\n\r\nconst STORAGE_KEY = 'clinic_state';\r\n\r\n// 排序病人的函數\r\nconst sortPatients = (patients: Patient[]): Patient[] => {\r\n  // 首先找出正在看診中的病人\r\n  const inProgressPatient = patients.find(p => p.status === 'inProgress');\r\n  \r\n  // 將病人分為幾個組別\r\n  const inProgress = inProgressPatient ? [inProgressPatient] : [];\r\n  const waitingNormal = patients.filter(p => p.status === 'waiting' && !p.returnTime);\r\n  const waitingReturned = patients.filter(p => p.status === 'waiting' && p.returnTime);\r\n  const noShowNotReturned = patients.filter(p => p.status === 'noShow' && !p.returnTime);\r\n  const noShowReturned = patients.filter(p => p.status === 'noShow' && p.returnTime);\r\n  const completed = patients.filter(p => p.status === 'completed');\r\n  \r\n  // 對正常候診病人按號碼排序\r\n  waitingNormal.sort((a, b) => a.queueNumber - b.queueNumber);\r\n  \r\n  // 對已回報的過號病人按回報時間排序\r\n  waitingReturned.sort((a, b) => a.returnTime!.getTime() - b.returnTime!.getTime());\r\n  noShowReturned.sort((a, b) => a.returnTime!.getTime() - b.returnTime!.getTime());\r\n  \r\n  // 合併已回報的過號病人到候診名單中，根據規則插入\r\n  // 規則：過號病人回報後，需等待目前看診中的病人看完，再等下一個正常病人看完後才輪到他看診\r\n  const finalWaiting = [...waitingNormal];\r\n  if (inProgressPatient && waitingNormal.length > 0) {\r\n    // 找到目前看診中的病人後的下一個正常病人\r\n    const nextNormalIndex = waitingNormal.findIndex(p => p.queueNumber > inProgressPatient.queueNumber);\r\n    let insertIndex = nextNormalIndex >= 0 ? nextNormalIndex + 1 : waitingNormal.length;\r\n    \r\n    // 插入已回報的過號病人 (從 waitingReturned 和 noShowReturned)\r\n    const allReturned = [...waitingReturned, ...noShowReturned];\r\n    for (const returnedPatient of allReturned) {\r\n      // 確保插入位置不超出陣列長度\r\n      if (insertIndex >= finalWaiting.length) {\r\n        finalWaiting.push(returnedPatient);\r\n      } else {\r\n        finalWaiting.splice(insertIndex, 0, returnedPatient);\r\n      }\r\n      // 下一個過號病人插入到下一個位置\r\n      insertIndex++;\r\n    }\r\n  } else {\r\n    // 如果沒有正在看診的病人或沒有正常候診病人，直接將過號病人加到最後\r\n    finalWaiting.push(...waitingReturned, ...noShowReturned);\r\n  }\r\n  \r\n  // 組合所有病人\r\n  return [\r\n    ...inProgress,\r\n    ...finalWaiting,\r\n    ...noShowNotReturned,\r\n    ...completed\r\n  ];\r\n};\r\n\r\nconst getInitialState = (): ClinicState => {\r\n  const savedState = localStorage.getItem(STORAGE_KEY);\r\n  if (savedState) {\r\n    try {\r\n      const parsed = JSON.parse(savedState);\r\n      // 將日期字符串轉換回 Date 對象\r\n      const state = {\r\n        ...parsed,\r\n        patients: parsed.patients.map((patient: any) => ({\r\n          ...patient,\r\n          checkInTime: new Date(patient.checkInTime),\r\n          noShowTime: patient.noShowTime ? new Date(patient.noShowTime) : undefined,\r\n          returnTime: patient.returnTime ? new Date(patient.returnTime) : undefined,\r\n        })),\r\n      };\r\n      \r\n      // 排序病人\r\n      state.patients = sortPatients(state.patients);\r\n      \r\n      return state;\r\n    } catch (e) {\r\n      console.error('Error parsing saved state:', e);\r\n    }\r\n  }\r\n  return {\r\n    patients: [],\r\n    maxQueueNumber: 0,\r\n  };\r\n};\r\n\r\nconst initialState = getInitialState();\r\n\r\nconst ClinicContext = createContext<{\r\n  state: ClinicState;\r\n  dispatch: React.Dispatch<ClinicAction>;\r\n} | null>(null);\r\n\r\nconst clinicReducer = (state: ClinicState, action: ClinicAction): ClinicState => {\r\n  let newState: ClinicState;\r\n  \r\n  switch (action.type) {\r\n    case 'ADD_PATIENT':\r\n      newState = {\r\n        ...state,\r\n        patients: [...state.patients, action.payload],\r\n        maxQueueNumber: Math.max(state.maxQueueNumber, action.payload.queueNumber),\r\n      };\r\n      break;\r\n    case 'UPDATE_PATIENT':\r\n      newState = {\r\n        ...state,\r\n        patients: state.patients.map((p) =>\r\n          p.id === action.payload.id ? action.payload : p\r\n        ),\r\n      };\r\n      break;\r\n    case 'SET_MAX_QUEUE_NUMBER':\r\n      newState = {\r\n        ...state,\r\n        maxQueueNumber: action.payload,\r\n      };\r\n      break;\r\n    case 'LOAD_STATE':\r\n      newState = action.payload;\r\n      break;\r\n    case 'SORT_PATIENTS':\r\n      newState = {\r\n        ...state,\r\n        patients: sortPatients(state.patients),\r\n      };\r\n      break;\r\n    default:\r\n      return state;\r\n  }\r\n\r\n  // 排序病人\r\n  newState.patients = sortPatients(newState.patients);\r\n\r\n  // 保存到 localStorage\r\n  localStorage.setItem(STORAGE_KEY, JSON.stringify(newState));\r\n  return newState;\r\n};\r\n\r\nexport const ClinicProvider: React.FC<{ children: ReactNode }> = ({ children }) => {\r\n  const [state, dispatch] = useReducer(clinicReducer, initialState);\r\n\r\n  // 監聽 localStorage 變化\r\n  useEffect(() => {\r\n    const handleStorageChange = (e: StorageEvent) => {\r\n      if (e.key === STORAGE_KEY && e.newValue) {\r\n        try {\r\n          const newState = JSON.parse(e.newValue);\r\n          // 將日期字符串轉換回 Date 對象\r\n          const parsedState = {\r\n            ...newState,\r\n            patients: newState.patients.map((patient: any) => ({\r\n              ...patient,\r\n              checkInTime: new Date(patient.checkInTime),\r\n              noShowTime: patient.noShowTime ? new Date(patient.noShowTime) : undefined,\r\n              returnTime: patient.returnTime ? new Date(patient.returnTime) : undefined,\r\n            })),\r\n          };\r\n          \r\n          // 排序病人\r\n          parsedState.patients = sortPatients(parsedState.patients);\r\n          \r\n          // 直接加載整個狀態\r\n          dispatch({ type: 'LOAD_STATE', payload: parsedState });\r\n        } catch (e) {\r\n          console.error('Error parsing storage event data:', e);\r\n        }\r\n      }\r\n    };\r\n\r\n    window.addEventListener('storage', handleStorageChange);\r\n    return () => window.removeEventListener('storage', handleStorageChange);\r\n  }, []);\r\n\r\n  return (\r\n    <ClinicContext.Provider value={{ state, dispatch }}>\r\n      {children}\r\n    </ClinicContext.Provider>\r\n  );\r\n};\r\n\r\nexport const useClinic = () => {\r\n  const context = useContext(ClinicContext);\r\n  if (!context) {\r\n    throw new Error('useClinic must be used within a ClinicProvider');\r\n  }\r\n  return context;\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}